; ____________________________                                                 
; ██▀▀█▀▀██▀▀▀▀▀▀▀█▀▀█        │  ▄▄▄▄      ▄  ▄▄                               
; ██  ▀  █▄  ▀██▄ ▀ ▄█ ▄▀▀ █  │   ██  ██▄▀ ▄  ██  ▄█▀▄                         
; █  █ █  ▀▀  ▄█  █  █ ▀▄█ █▄ │   ██  ██   ██ ▀█▄ ▀█▄▀                         
; ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀────────┘                                                
;  by Guillaume 'Aoineko' Blanchard under CC-BY-AS license                     
;==============================================================================
; Autogenerated Trilo Tracker player for MSX-GL library                        
;  on 26/04/2022 at  1:20:01,63                                                         
;                                                                              
; Trilo Tracker and the Z80 players are coded and designed by                  
;  Cornelisser under ??? License.                                              
;==============================================================================
B_ACTNOT = .+1
replay_init:
TRACK_cmd_ToneSlideAdd:
B_TRGNOT: ld a,#0x8
B_TRGCMD = .+1
TRACK_cmd_detune = .+2
B_ACTMOR = .+2
TRACK_cmd_ToneAdd:
B_TRGENV: call replay_set_SCC_balance
TRACK_cmd_0 = .+1
B_TRGWAV = .+1
B_TRGINS: ld a,#0x8
TRACK_cmd_2 = .+1
TRACK_cmd_3 = .+2
TRACK_cmd_1:
B_PSGSCC: call replay_set_PSG_balance
TRACK_cmd_4_depth: xor a
TRACK_cmd_4_step = .+1
TRACK_cmd_NoteAdd = .+2
    ld (replay_mode),a
TRACK_cmd_B = .+1
TRACK_cmd_E = .+2
TRACK_cmd_A: ld (equalization_cnt),a
TRACK_Step = .+1
TRACK_Delay = .+2
TRACK_Timer: ld (equalization_flag),a
TRACK_cmd_A_add = .+1
TRACK_prevDelay: ld (equalization_freq),a
    ld (replay_morph_speed),a
    inc a
    ld (replay_morph_type),a
    ret 
replay_pause: ld a,(replay_mode)
    and a
    jp nz,_r_pause_disable
TRACK_REC_SIZE = .+1
_r_pause_enable: ld a,#0x1
    ld (replay_mode),a
    ret 
_r_pause_disable: xor a
    ld (replay_mode),a
    ld a,#0x3f
    ld (PSG_regMIXER),a
    xor a
    ld (SCC_regMIXER),a
    ret 
replay_fade_out: ld (replay_fade),a
    ld (replay_fade_timer),a
    xor a
    ld (replay_fade_vol),a
    ret 
replay_set_SCC_balance: call _getnewbalancebase
    ld (replay_mainSCCvol),hl
    ret 
replay_set_PSG_balance: call _getnewbalancebase
    ld (replay_mainPSGvol),hl
    ret 
_getnewbalancebase: add a,a
    add a,a
    add a,a
    add a,a
    ld hl,#_rmp_ns_addskip+9
    add a,l
    ld l,a
    ret nc
    inc h
    ret 
replay_equalization: and a
_SUS = .+1
_VOL = .+2
_REL: jp z,replay_equalizationoff
    ld a,(TRACK_Instrument-7)
    and #0x2
    xor #0x2
replay_equalizationoff: ld (equalization_freq),a
    ret 
replay_loadsong: ld a,(hl)
    inc hl
_INS = .+1
    ld (replay_speed),a
    ld de,#replay_wavebase
    ld bc,#TRACK_prevDelay
    ldir
    ld (replay_orderpointer),hl
    xor a
    ld (replay_speed_subtimer),a
    ld hl,#TRACK_ToneTable_PSG
    ld (replay_tonetable),hl
    ld bc,#PAL-3
    ld hl,#TRACK_Chan1
_CMD = .+2
    ld de,#TRACK_Chan1+1
    ld (hl),a
    ldir
    ld (replay_arp_speed),a
    ld (SCC_regMIXER),a
    ld (PSG_regVOLA),a
    ld (PSG_regVOLB),a
    ld (PSG_regVOLC),a
    ld (replay_noise),a
    ld a,#0x3f
    ld (PSG_regMIXER),a
    ld a,#0x1
    ld (replay_speed_timer),a
    ld (TRACK_Chan2-3),a
    ld (TRACK_Chan3-3),a
_SPC = .+2
    ld (TRACK_Chan4-3),a
    ld (TRACK_Chan5-3),a
    ld (TRACK_Chan6-3),a
_WAIT = .+1
_EOT: ld (TRACK_Chan7-3),a
    ld (TRACK_Chan8-3),a
    ld (PSG_registers-3),a
    ld a,#0xfe
    ld (TRACK_Chan1),a
    ld (TRACK_Chan2),a
    ld (TRACK_Chan3),a
    ld (TRACK_Chan4),a
    ld (TRACK_Chan5),a
    ld (TRACK_Chan6),a
    ld (TRACK_Chan7),a
    ld (TRACK_Chan8),a
    ld a,#0xff
    ld (TRACK_Chan4+9),a
    ld (TRACK_Chan5+9),a
    ld (TRACK_Chan6+9),a
    ld (TRACK_Chan7+9),a
    ld a,#0x80
    ld (0xe0f2),a
    ld (0xe119),a
    ld (0xe140),a
    ld (0xe167),a
    ld (0xe18e),a
    call replay_route
    ld a,#0x1
    ld (replay_mode),a
    ret 
replay_play_no: xor a
    ld (PSG_regVOLA),a
    ld (PSG_regVOLB),a
    ld (PSG_regVOLC),a
    ld (SCC_regMIXER),a
    xor #0x3f
    ld (PSG_regMIXER),a
    ret 
replay_play: ld a,(replay_mode)
    and a
    jr z,replay_play_no
    ld a,(equalization_freq)
    and a
    jr z,PAL
NTSC: ld hl,#equalization_cnt
    dec (hl)
    jr nz,PAL
    ld a,#0x6
    ld (hl),a
    ld (equalization_flag),a
    xor a
    ld (equalization_flag),a
    ret 
PAL: ld hl,#replay_speed_timer
    dec (hl)
    jp nz,_replay_check_patternend
    xor a
    ld bc,(replay_speed)
    srl c
    adc a,a
    xor b
    ld (replay_speed_subtimer),a
    add a,c
    ld (replay_speed_timer),a
decode_data:
decode_datadecode1: ld hl,#TRACK_Chan2-3
    dec (hl)
    jp nz,decode_datadecode2
    ld a,(0xe07d)
    ld d,a
    ld a,(TRACK_Chan1+7)
    ld ix,#0xe084
    ld bc,(TRACK_pointer1)
    call decode_data_chan
    ld (TRACK_pointer1),bc
    ld a,d
    ld (0xe07d),a
decode_datadecode2: ld hl,#TRACK_Chan3-3
    dec (hl)
    jp nz,decode_datadecode3
    ld a,(0xe0a4)
    ld d,a
    ld a,(TRACK_Chan2+7)
    ld ix,#0xe0ab
    ld bc,(TRACK_pointer2)
    call decode_data_chan
    ld (TRACK_pointer2),bc
    ld a,d
    ld (0xe0a4),a
decode_datadecode3: ld hl,#TRACK_Chan4-3
    dec (hl)
    jp nz,decode_datadecode4
    ld a,(0xe0cb)
    ld d,a
    ld a,(TRACK_Chan3+7)
    ld ix,#0xe0d2
    ld bc,(TRACK_pointer3)
    call decode_data_chan
    ld (TRACK_pointer3),bc
    ld a,d
    ld (0xe0cb),a
decode_datadecode4: ld hl,#TRACK_Chan5-3
    dec (hl)
    jp nz,decode_datadecode5
    .db 0xfd
    .db 0x26
    .db 0x0
    ld a,(0xe0f2)
    ld d,a
    ld a,(TRACK_Chan4+7)
    ld ix,#0xe0f9
    ld bc,(TRACK_pointer4)
    call decode_data_chan
    ld (TRACK_pointer4),bc
    ld a,d
    ld (0xe0f2),a
decode_datadecode5: ld hl,#TRACK_Chan6-3
    dec (hl)
    jp nz,decode_datadecode6
    .db 0xfd
    .db 0x26
    .db 0x20
    ld a,(0xe119)
    ld d,a
    ld a,(TRACK_Chan5+7)
    ld ix,#0xe120
    ld bc,(TRACK_pointer5)
    call decode_data_chan
    ld (TRACK_pointer5),bc
    ld a,d
    ld (0xe119),a
decode_datadecode6: ld hl,#TRACK_Chan7-3
    dec (hl)
    jp nz,decode_datadecode7
    .db 0xfd
    .db 0x26
    .db 0x40
    ld a,(0xe140)
    ld d,a
    ld a,(TRACK_Chan6+7)
    ld ix,#0xe147
    ld bc,(TRACK_pointer6)
    call decode_data_chan
    ld (TRACK_pointer6),bc
    ld a,d
    ld (0xe140),a
decode_datadecode7: ld hl,#TRACK_Chan8-3
    dec (hl)
    jp nz,decode_datadecode8
    .db 0xfd
    .db 0x26
    .db 0x60
    ld a,(0xe167)
    ld d,a
    ld a,(TRACK_Chan7+7)
    ld ix,#0xe16e
    ld bc,(TRACK_pointer7)
    call decode_data_chan
    ld (TRACK_pointer7),bc
    ld a,d
    ld (0xe167),a
decode_datadecode8: ld hl,#PSG_registers-3
    dec (hl)
    jp nz,decode_datadecode_end
    ld a,(0xe18e)
    ld d,a
    ld a,(TRACK_Chan8+7)
    ld ix,#0xe195
    ld bc,(TRACK_pointer8)
    call decode_data_chan
    ld (TRACK_pointer8),bc
    ld a,d
    ld (0xe18e),a
decode_datadecode_end:
process_data: ld a,(replay_morph_active)
    and a
    call nz,replay_process_morph
    xor a
    ld (SCC_regMIXER),a
    ld hl,(replay_mainPSGvol)
    ld (replay_mainvol),hl
    ld ix,#0xe084
    ld a,(0xe07d)
    ld d,a
    call process_data_chan
    jp nc,process_dataskipa
    ld (PSG_registers),hl
process_dataskipa: ld a,(SCC_regVOLE)
    ld (PSG_regVOLA),a
    ld ix,#0xe0ab
    ld a,(0xe0a4)
    ld d,a
    call process_data_chan
    jp nc,process_dataskipb
    ld (PSG_regToneB),hl
process_dataskipb: ld a,(SCC_regVOLE)
    ld (PSG_regVOLB),a
    ld ix,#0xe0d2
    ld a,(0xe0cb)
    ld d,a
    call process_data_chan
    jp nc,process_dataskipc
    ld (PSG_regToneC),hl
process_dataskipc: ld a,(SCC_regVOLE)
    ld (PSG_regVOLC),a
    ld a,(SCC_regMIXER)
    srl a
    srl a
    xor #0x3f
    ld (PSG_regMIXER),a
    xor a
    ld (SCC_regMIXER),a
    ld hl,(replay_mainSCCvol)
    ld (replay_mainvol),hl
    .db 0xfd
    .db 0x26
    .db 0x0
    ld ix,#0xe0f9
    ld a,(0xe0f2)
    ld d,a
    call process_data_chan
    jp nc,skipd
    ld (SCC_registers),hl
skipd: ld a,(SCC_regVOLE)
    ld (SCC_regVOLA),a
    .db 0xfd
    .db 0x26
    .db 0x20
    ld ix,#0xe120
    ld a,(0xe119)
    ld d,a
    call process_data_chan
    jp nc,skipdskipe
    ld (SCC_regToneB),hl
skipdskipe: ld a,(SCC_regVOLE)
    ld (SCC_regVOLB),a
    .db 0xfd
    .db 0x26
    .db 0x40
    ld ix,#0xe147
    ld a,(0xe140)
    ld d,a
    call process_data_chan
    jp nc,skipdskipf
    ld (SCC_regToneC),hl
skipdskipf: ld a,(SCC_regVOLE)
    ld (SCC_regVOLC),a
    .db 0xfd
    .db 0x26
    .db 0x60
    ld ix,#0xe16e
    ld a,(0xe167)
    ld d,a
    call process_data_chan
    jp nc,skipdskipg
    ld (SCC_regToneD),hl
skipdskipg: ld a,(SCC_regVOLE)
    ld (SCC_regVOLD),a
    ld ix,#0xe195
    ld a,(0xe18e)
    ld d,a
    call process_data_chan
    jp nc,skipdskiph
    ld (SCC_regToneE),hl
skipdskiph: ld a,(replay_fade)
    and a
    ret z
    ld a,(replay_fade_timer)
    dec a
    jp nz,skipdno_new_step
    ld a,(replay_fade_vol)
    inc a
    cp #0x10
    jp c,skipdcont_fadeing
    xor a
    ld (replay_fade),a
    jp replay_pause
skipdcont_fadeing: ld (replay_fade_vol),a
    ld a,(replay_fade)
skipdno_new_step: ld (replay_fade_timer),a
    ld a,(replay_fade_vol)
    ld c,a
    ld b,#0x3
    ld hl,#PSG_regVOLA
    call skipdcalc_vol
    ld b,#0x5
    ld hl,#SCC_regVOLA
skipdcalc_vol: ld a,(hl)
    sub c
    jp nc,skipdno_carry
    xor a
skipdno_carry: ld (hl),a
    inc hl
    djnz skipdcalc_vol
    ret 
_replay_check_patternend: ld a,(TRACK_Chan2-3)
    dec a
    jp nz,decode_datadecode_end
    ld hl,(TRACK_pointer1)
    ld a,(hl)
    cp #0xbf
    jp nz,decode_datadecode_end
    ld hl,(replay_orderpointer)
    xor a
    cp (hl)
    jp nz,_replay_check_patternendno_restart
    inc hl
    cp (hl)
    dec hl
    jp nz,_replay_check_patternendno_restart
    inc hl
    inc hl
    ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
_replay_check_patternendno_restart: ld de,#TRACK_pointer1
    ld bc,#TRACK_cmd_E
    ldir
    ld (replay_orderpointer),hl
    jp decode_datadecode_end
decode_data_chan: ld (replay_previous_note),a
    ld a,(bc)
    cp #0x60
    jp c,_replay_decode_note
    cp #0x61
    jp c,_replay_decode_release
    jp z,_replay_decode_release
_rdn2: cp #0x71
    jp c,_replay_decode_vol
_rdv2: cp #0x90
    jp c,_replay_decode_ins
_rdi2: cp #0xbf
    jp c,_replaydecode_cmd
    jp _replay_decode_delay
_rdn: cp #0x62
    jp c,_rd_delay
    jp _rdn2
_rdi: cp #0x90
    jp c,_rd_delay
    jp _rdi2
_rdv: cp #0x71
    jp c,_rd_delay
    jp _rdv2
_rdc: inc bc
_rdc_noinc: ld a,(bc)
    cp #0xbf
    jp c,_rd_delay
    jp _replay_decode_delay
_rd_delay: ld a,+20(ix)
    ld +19(ix),a
    jp _replay_decode_trigger_porttone_check
_rd_eot: inc a
    ld +19(ix),a
    jp _replay_decode_trigger_porttone_check
_replay_decode_delay: sub #0xbf
    jp z,_rd_eot
    ld +19(ix),a
    ld +20(ix),a
    inc bc
_replay_decode_trigger_porttone_check: bit 0,d
    ret z
    bit 3,d
    ret z
    ld a,-16(ix)
    cp #0x2
    ret nc
    res 0,d
    set 1,d
    ld a,+9(ix)
    jp decode_cmd3_port_tone_new_note
_replay_decode_note: ld -10(ix),a
    set 0,d
    res 4,d
    inc bc
    ld a,(bc)
    jp _rdn
_replay_decode_release:
_replay_decode_sustain: res 1,d
    inc bc
    ld a,(bc)
    jp _rdn
_replay_decode_ins: res 4,d
    sub #0x71
    cp -17(ix)
    jp z,_replay_decode_insskip_ins
    ld -17(ix),a
    add a,a
    ld hl,(replay_insbase)
    add a,l
    ld l,a
    jp nc,_replay_decode_insskip
    inc h
_replay_decode_insskip: ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
    ld a,(hl)
    inc hl
    cp -8(ix)
    jp z,_replay_decode_insskip_wav_trig
    set 6,d
    ld -8(ix),a
_replay_decode_insskip_wav_trig: .db 0xdd
    .db 0x75
    .db 0xf1
    .db 0xdd
    .db 0x74
    .db 0xf2
    .db 0xdd
    .db 0x75
    .db 0xf3
    .db 0xdd
    .db 0x74
    .db 0xf4
_replay_decode_insskip_ins: inc bc
    ld a,(bc)
    jp _rdi
_replay_decode_vol: sub #0x61
    add a,a
    add a,a
    add a,a
    add a,a
    ld e,a
    ld a,-9(ix)
    and #0xf
    or e
    ld -9(ix),a
    inc bc
    ld a,(bc)
    jp _rdv
_replaydecode_cmd: sub #0x90
    ld e,a
    ld hl,#DECODE_CMDLIST
    add a,a
    add a,l
    ld l,a
    jp nc,_replaydecode_cmdskip
    inc h
_replaydecode_cmdskip: ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
    inc bc
    ld a,(bc)
    jp (hl)
DECODE_CMDLIST: ld c,#0x5
    sbc a,a
    dec b
    inc bc
    dec b
    push hl
    inc b
    ld l,l
    dec b
    ret m
    inc b
    or h
    dec b
    or h
    dec b
    ld l,l
    dec b
    call nz,0xcf05
    dec b
    .db 0xed
    .db 0x5
    rst 8
    ld b,#0xf2
    dec b
    ret m
    dec b
    ld (bc),a
    ld b,#0xc
    ld b,#0x11
    ld b,#0x2e
    ld b,#0x34
    ld b,#0x47
    ld b,#0x4d
    ld b,#0x53
    ld b,#0x67
    ld b,#0x91
    ld b,#0xc5
    ld b,#0x11
    rlca 
    ld d,#0x7
    inc e
    rlca 
decode_cmd0_arpeggio = .+2
    ld (0xdd07),hl
    ld (hl),a
    ld b,#0xdd
    ld (hl),e
    ret p
    set 3,d
    ld +17(ix),#0x0
    ld +18(ix),#0x2
    jp _rdc
decode_cmd1_port_up: .db 0xdd
    .db 0x73
    .db 0xf0
    ld +7(ix),a
    set 3,d
    jp _rdc
decode_cmd2_port_down: .db 0xdd
    .db 0x73
    .db 0xf0
    ld +8(ix),a
    set 3,d
    jp _rdc
decode_cmd3_port_tone: .db 0xdd
    .db 0x73
    .db 0xf0
    set 3,d
    set 1,d
    ld +9(ix),a
    ld +17(ix),#0x2
    bit 0,d
    jp z,_rdc
    res 0,d
    call decode_cmd3_port_tone_new_note
    jp _rdc
decode_cmd3_port_tone_new_note: and #0x7f
    ex af,af'
    exx
    ld a,(replay_previous_note)
    add a,a
    ld hl,(replay_tonetable)
    add a,l
    ld l,a
    jp nc,decode_cmd3_port_tone_new_noteskip
    inc h
decode_cmd3_port_tone_new_noteskip: ld e,(hl)
    inc hl
    ld d,(hl)
    ld l,+0(ix)
    ld h,+1(ix)
    add hl,de
    ex de,hl
    ld a,-10(ix)
    add a,a
    ld hl,(replay_tonetable)
    add a,l
    ld l,a
    jp nc,decode_cmd3_port_tone_new_noteskip2
    inc h
    ccf 
decode_cmd3_port_tone_new_noteskip2: ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
    ex de,hl
    sbc hl,de
    .db 0xdd
    .db 0x75
    .db 0x0
    .db 0xdd
    .db 0x74
    .db 0x1
    ex af,af'
    bit 7,h
    jp nz,decode_cmd3_port_tone_new_noteskip3
    or #0x80
decode_cmd3_port_tone_new_noteskip3: ld +9(ix),a
    exx
    ret 
decode_cmd8_tremolo:
decode_cmd4_vibrato: .db 0xdd
    .db 0x73
    .db 0xf0
    ld e,a
    and #0xf
    jp z,decode_cmd4_vibratodepth
    ld +12(ix),a
    neg
    ld +18(ix),a
decode_cmd4_vibratodepth: ld a,e
    and #0xf0
    jp z,decode_cmd4_vibratoend
    sub #0x10
    ld hl,#TRACK_Vibrato_sine
    add a,a
    jp nc,decode_cmd4_vibratoskip1
    inc h
decode_cmd4_vibratoskip1: add a,l
    ld l,a
    jp nc,decode_cmd4_vibratoskip2
    inc h
decode_cmd4_vibratoskip2: .db 0xdd
    .db 0x75
    .db 0xa
    .db 0xdd
    .db 0x74
    .db 0xb
decode_cmd4_vibratoend: set 3,d
    jp _rdc
decode_cmd5_vibrato_port_tone: .db 0xdd
    .db 0x73
    .db 0xf0
    ld +14(ix),a
    set 3,d
    bit 0,d
    jp z,_rdc
    res 0,d
    ld a,+9(ix)
    jp decode_cmd3_port_tone_new_note
decode_cmd6_vibrato_vol:
decode_cmd7_vol_slide: .db 0xdd
    .db 0x73
    .db 0xf0
    ld +14(ix),a
    and #0x7f
    ld +17(ix),a
    set 3,d
    jp _rdc
decode_cmd9_note_cut: set 3,d
    .db 0xdd
    .db 0x73
    .db 0xf0
    ld +17(ix),a
    jp _rdc
decode_cmd10_note_delay: bit 0,d
    jp z,_rdc
    set 3,d
    res 0,d
    .db 0xdd
    .db 0x73
    .db 0xf0
    ld +17(ix),a
    ld a,-10(ix)
    ld +16(ix),a
    ld a,(replay_previous_note)
    ld -10(ix),a
    jp _rdc
decode_cmd11_command_end: res 3,d
    jp _rdc_noinc
decode_cmd13_arp_speed: ld (replay_arp_speed),a
    jp _rdc
decode_cmd14_fine_up: ld +0(ix),a
    ld +1(ix),#0x0
    jp _rdc
decode_cmd15_fine_down: ld +0(ix),a
    ld +1(ix),#0xff
    jp _rdc
decode_cmd16_notelink: res 0,d
    jp _rdc_noinc
decode_cmd17_track_detune: ld e,a
    and #0x7
    bit 3,e
    jp z,decode_cmd17_track_detunepos
    cpl 
    ld +4(ix),a
    ld +5(ix),#0xff
    jp _rdc
decode_cmd17_track_detunepos: ld +4(ix),a
    ld +5(ix),#0x0
    jp _rdc
decode_cmd18_trigger: ld (replay_trigger),a
    jp _rdc
decode_cmd19_speed: ld (replay_speed),a
    srl a
    ld e,a
    ld a,#0x0
    adc a,a
    ld (replay_speed_subtimer),a
    add a,e
    ld (replay_speed_timer),a
    jp _rdc
decode_cmd20_envelope_high: ld (PSG_regEnvH),a
    jp _rdc
decode_cmd21_envelope_low: ld (PSG_regEnvL),a
    jp _rdc
decode_cmd22_SCC_reset: set 6,d
    res 4,d
    ld l,-15(ix)
    ld h,-14(ix)
    inc hl
    inc hl
    ld a,(hl)
    ld -8(ix),a
    ret 
    jp _rdc_noinc
decode_cmd23_SCC_duty: res 4,d
    res 6,d
    ld e,a
    ex af,af'
    ld hl,#_0x9800
    .db 0xfd
    .db 0x7c
    add a,l
    ld l,a
    jp nc,decode_cmd23_SCC_dutyskip
    inc h
decode_cmd23_SCC_dutyskip: ld a,e
    ex af,af'
    inc a
    ld e,#0x77
decode_cmd23_SCC_dutywspw_loop_h: ld (hl),e
    inc hl
    dec a
    jp nz,decode_cmd23_SCC_dutywspw_loop_h
    ex af,af'
    sub #0x1f
    ld e,#0x87
decode_cmd23_SCC_dutywspw_loop_l: ld (hl),e
    inc hl
    dec a
    jp nz,decode_cmd23_SCC_dutywspw_loop_l
    jp _rdc
decode_cmd24_SCC_soften: res 4,d
    res 6,d
    ld a,-8(ix)
    ld l,a
    ld h,#0x0
    add hl,hl
    add hl,hl
    ld a,d
    ex af,af'
    ld de,(replay_wavebase)
    add hl,de
    ld de,#_0x9800
    .db 0xfd
    .db 0x7c
    add a,e
    ld e,a
    jp nc,decode_cmd24_SCC_softenskip
    inc d
decode_cmd24_SCC_softenskip: .db 0xfd
    .db 0x2e
    .db 0x20
decode_cmd24_SCC_softensoftloop: ld a,(hl)
    sra a
    ld (de),a
    .db 0xfd
    .db 0x2d
    jp z,decode_cmd24_SCC_softenend
    inc hl
    inc de
    jp decode_cmd24_SCC_softensoftloop
decode_cmd24_SCC_softenend: ex af,af'
    ld d,a
    jp _rdc_noinc
decode_cmd25_SCC_waveform: ld -8(ix),a
    set 6,d
    res 4,d
    jp _rdc
decode_cmd12_SCC_morph: push bc
    ld (replay_morph_waveform),a
    xor a
    ld (replay_morph_counter),a
    inc a
    ld (replay_morph_timer),a
    ld a,(replay_morph_type)
    and a
    jp z,decode_cmd12_SCC_morphmorph_fromtrack
decode_cmd12_SCC_morphmorph_fromregister: ld h,#0x98
    .db 0xfd
    .db 0x7c
    ld l,a
    jp decode_cmd12_SCC_morphmorph_copy
decode_cmd12_SCC_morphmorph_fromtrack: ld l,-8(ix)
    ld h,#0x0
    add hl,hl
    add hl,hl
    ld bc,(replay_wavebase)
    add hl,bc
decode_cmd12_SCC_morphmorph_copy: ld bc,#replay_morph_buffer
    ld a,#0x20
    ex af,af'
    ld a,(hl)
    inc bc
    ld (bc),a
    inc hl
    inc bc
    ex af,af'
    dec a
    jp nz,decode_cmd12_SCC_morphmorph_copy+5
    ld a,#0xff
    ld (replay_morph_active),a
    set 4,d
    pop bc
    jp _rdc
decode_cmd26_SCC_morph_copy: set 4,d
    jp _rdc_noinc
decode_cmd27_SCC_morph_type: ld (replay_morph_type),a
    jp _rdc
decode_cmd28_SCC_morph_speed: ld (replay_morph_speed),a
    jp _rdc
decode_cmd29_SCC_sample: jp _rdc
process_data_chan: ld hl,#SCC_regMIXER
    rrc (hl)
    ld +13(ix),#0x0
    bit 3,d
    jr z,process_note
    ld hl,#PROCESS_CMDLIST
    ld a,-16(ix)
    add a,a
    add a,l
    ld l,a
    jp nc,process_data_chanskip
    inc h
process_data_chanskip: ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
    jp (hl)
process_note:
process_commandEND: bit 0,d
    jp z,process_noNoteTrigger
process_triggerNote: res 0,d
    set 1,d
    ld l,-13(ix)
    ld h,-12(ix)
    .db 0xdd
    .db 0x75
    .db 0xf1
    .db 0xdd
    .db 0x74
    .db 0xf2
    ld (_SP_Storage),sp
    ld sp,ix
    pop af
    pop af
    ld hl,#replay_init
    push hl
    push hl
    push hl
    push hl
    push hl
    ld sp,(_SP_Storage)
process_noNoteTrigger: bit 1,d
    .db 0xdd
    .db 0x72
    .db 0xf9
    jp z,process_noNoteActive
    ld e,-15(ix)
    ld d,-14(ix)
process_macro: ld a,(de)
    inc de
    and a
    jp z,macro_volume_same
    ld hl,#MACROACTIONLIST-2
    add a,l
    ld l,a
    jp nc,process_macroskip
    inc h
process_macroskip: ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
    jp (hl)
MACROACTIONLIST: xor e
    rlca 
    cp b
    rlca 
    nop
    nop
    inc d
    ex af,af'
    inc e
    ex af,af'
    ld l,#0x8
    rlc a
    sub #0x7
    nop
    nop
    call po,0xe807
    rlca 
    dec b
    ex af,af'
    .db 0xfd
    .db 0x7
    ret m
    rlca 
macro_mixer: ld a,(de)
    inc de
    ld b,a
    ld a,(SCC_regMIXER)
    or b
    ld (SCC_regMIXER),a
    jp process_macro
macro_tone_add: ld a,(de)
    inc de
    add a,-5(ix)
    ld -5(ix),a
    ld a,(de)
    adc a,-4(ix)
    ld -4(ix),a
    inc de
    jp process_macro
macro_noise_base: ld a,(de)
    inc de
    ld -2(ix),a
    ld (replay_noise),a
    jp process_macro
macro_noise_add: ld a,(de)
    inc de
    add a,-2(ix)
    ld -2(ix),a
    ld (replay_noise),a
    jp process_macro
macro_noise_vol: inc de
    jp process_macro
macro_voice: ld a,(de)
    inc de
    ld -8(ix),a
    set 6,-7(ix)
    res 4,-7(ix)
    jp process_macro
macro_envelope_shape: ld a,(de)
    inc de
    ld (PSG_regEnvShape),a
macro_envelope: ld a,#0x10
    ld (SCC_regVOLE),a
    jp _macro_end
macro_loop: ex de,hl
    ld e,(hl)
    ld d,#0xff
    add hl,de
    ex de,hl
    jp process_macro
macro_volume_same: ld a,-3(ix)
    jp _macro_set_volume
macro_vol_base: ld a,(de)
    inc de
    ld -3(ix),a
    jp _macro_set_volume
macro_vol_add: ld a,(de)
    inc de
    add a,-3(ix)
    cp #0x10
    jp c,macro_vol_addnolimit
    ld a,#0xf
macro_vol_addnolimit: ld -3(ix),a
    jp _macro_set_volume
macro_vol_sub: ld a,(de)
    ld h,a
    inc de
    ld a,-3(ix)
    sub h
    jp nc,macro_vol_subnolimit
    xor a
macro_vol_subnolimit: ld -3(ix),a
_macro_set_volume: or -9(ix)
    ld b,-1(ix)
    sub b
    jp nc,_macro_set_volumeskip2
    add a,b
    and #0xf
_macro_set_volumeskip2: ld bc,(replay_mainvol)
    add a,c
    ld c,a
    jp nc,_macro_set_volumeskip
    inc b
_macro_set_volumeskip: ld a,(bc)
    bit 7,-7(ix)
    jp nz,_macro_set_volumeskip3
    rra 
    rra 
    rra 
    rra 
_macro_set_volumeskip3: and #0xf
    ld (SCC_regVOLE),a
_macro_end: .db 0xdd
    .db 0x73
    .db 0xf1
    .db 0xdd
    .db 0x72
    .db 0xf2
    ld a,-10(ix)
    add a,+13(ix)
    add a,a
    ld hl,(replay_tonetable)
    add a,l
    ld l,a
    jp nc,_macro_endskip
    inc h
_macro_endskip: ld a,(hl)
    inc hl
    ld h,(hl)
    ld l,a
    ld c,-5(ix)
    ld b,-4(ix)
    add hl,bc
    ld (_SP_Storage),sp
    ld sp,ix
    pop bc
    add hl,bc
    pop bc
    bit 7,-7(ix)
    jp z,_macro_endtonePSG
_macro_endtoneSCC: dec bc
_macro_endtonePSG: add hl,bc
    pop bc
    add hl,bc
    ld sp,(_SP_Storage)
    scf
    ret 
process_noNoteActive: xor a
    ld (SCC_regVOLE),a
    ret 
PROCESS_CMDLIST: ld c,a
    add hl,bc
    push af
    add hl,bc
    dec a
    add hl,bc
    cp d
    ex af,af'
    or (hl)
    add hl,bc
    dec hl
    add hl,bc
    ei
    add hl,bc
    ld bc,#0x920a
    add hl,bc
    dec l
    ld a,(bc)
process_cmd0_arpeggio = .+2
    ld a,(0xdd0a)
    ld a,(hl)
    ld de,#0xcaa7
    sbc a,#0x8
    dec a
    ld +17(ix),a
    ld a,+18(ix)
    and a
    jp z,process_cmd0_arpeggioskip
    ld a,+6(ix)
    and #0xf
    ld +13(ix),a
    jp process_note
process_cmd0_arpeggioskip: ld +13(ix),#0x0
    jp process_note
process_cmd0_arpeggionextNote: ld a,(replay_arp_speed)
    ld +17(ix),a
    ld a,+18(ix)
    and a
    jr nz,process_cmd0_arpeggioskip1
    ld +18(ix),#0x1
    ld a,+6(ix)
    rlca 
    rlca 
    rlca 
    rlca 
    ld +6(ix),a
    and #0xf
    ld +13(ix),a
    jp process_note
process_cmd0_arpeggioskip1: dec a
    jr nz,process_cmd0_arpeggioskip2
    ld +18(ix),#0x2
    ld a,+6(ix)
    rlca 
    rlca 
    rlca 
    rlca 
    ld +6(ix),a
    and #0xf
    jp nz,process_cmd0_arpeggiozero
    ld +18(ix),#0x0
process_cmd0_arpeggiozero: ld +13(ix),a
    jp process_note
process_cmd0_arpeggioskip2: ld +18(ix),#0x0
    ld +13(ix),#0x0
    jp process_note
process_cmd1_port_up: ld a,+0(ix)
    sub +7(ix)
    ld +0(ix),a
    jp nc,process_note
    dec +1(ix)
    jp process_note
process_cmd2_port_down: ld a,+0(ix)
    add a,+8(ix)
    ld +0(ix),a
    jp nc,process_note
    inc +1(ix)
    jp process_note
process_cmd3_port_tone: ld a,+9(ix)
    ld l,+0(ix)
    ld h,+1(ix)
    bit 7,h
    jp z,process_cmd3_sub
process_cmd3_add: add a,l
    ld +0(ix),a
    jp nc,process_cmd3_addskip
    inc h
process_cmd3_addskip: bit 7,h
    jp z,process_cmd3_stop
    .db 0xdd
    .db 0x74
    .db 0x1
    jp process_note
process_cmd3_sub: and #0x7f
    ld c,a
    xor a
    ld b,a
    sbc hl,bc
    bit 7,h
    jp nz,process_cmd3_stop
    .db 0xdd
    .db 0x75
    .db 0x0
    .db 0xdd
    .db 0x74
    .db 0x1
    jp process_note
process_cmd3_stop: res 3,d
    ld +0(ix),#0x0
    ld +1(ix),#0x0
    jp process_note
process_cmd8_tremolo: ld l,+10(ix)
    ld h,+11(ix)
    ld a,+18(ix)
    add a,+12(ix)
    and #0x3f
    ld +18(ix),a
    sra a
    add a,l
    ld l,a
    jp nc,process_cmd8_tremoloskip
    inc h
process_cmd8_tremoloskip: ld a,(hl)
    add a,a
    add a,a
    add a,a
    add a,a
    ld -1(ix),a
    jp process_note
process_cmd4_vibrato: ld l,+10(ix)
    ld h,+11(ix)
    ld a,+18(ix)
    add a,+12(ix)
    and #0x3f
    ld +18(ix),a
    bit 5,a
    jp z,process_cmd4_vibratopos
process_cmd4_vibratoneg: and #0x1f
    add a,l
    ld l,a
    jp nc,process_cmd4_vibratoskip1
    inc h
process_cmd4_vibratoskip1: ld a,(hl)
    neg
    jp z,process_cmd4_vibratozero
    ld +2(ix),a
    ld +3(ix),#0xff
    jp process_note
process_cmd4_vibratopos: add a,l
    ld l,a
    jp nc,process_cmd4_vibratoskip2
    inc h
process_cmd4_vibratoskip2: ld a,(hl)
process_cmd4_vibratozero: ld +2(ix),a
    ld +3(ix),#0x0
    jp process_note
process_cmd5_vibrato_port_tone: call process_cmdasub
    jp process_cmd3_port_tone
process_cmd6_vibrato_vol: call process_cmdasub
    jp process_cmd4_vibrato
process_cmd7_vol_slide: call process_cmdasub
    jp process_note
process_cmdasub: dec +17(ix)
    ret nz
    ld a,+14(ix)
    ld c,a
    and #0x7f
    ld +17(ix),a
    ld a,-9(ix)
    bit 7,c
    jp z,process_cmda_inc
process_cmda_dec: and a
    ret z
    sub #0x10
    ld -9(ix),a
    ret 
process_cmda_inc: cp #0xf0
    ret nc
    add a,#0x10
    ld -9(ix),a
    ret 
process_cmd9_note_cut: dec +17(ix)
    jp nz,process_note
    res 3,d
    res 1,d
    jp process_note
process_cmd10_note_delay: dec +17(ix)
    jp nz,process_note
    ld a,+16(ix)
    ld -10(ix),a
    set 0,d
    res 3,d
    jp process_note
replay_route: ld hl,#PSG_regEnvShape
    ld bc,#_rmp_ns_addskip+5
    ld a,(hl)
    and a
    jp z,_ptAY_noEnv
    ld d,a
    ld a,#0xd
    out (0xa0),a
    out (c),d
    ld (hl),#0x0
_ptAY_noEnv: dec hl
    ld a,#0xc
    out (0xa0),a
    dec a
    outd
    out (0xa0),a
    dec a
    outd
    out (0xa0),a
    dec a
    outd
    out (0xa0),a
    dec a
    outd
    out (0xa0),a
    dec a
    outd
    out (0xa0),a
    dec a
    outd
    out (0xa0),a
    outd
    dec a
    ld d,#0xff
_ptAY_loop: dec a
    out (0xa0),a
    out (c),d
    inc a
    out (0xa0),a
    outd
    dec a
    out (0xa0),a
    outd
    dec a
    jp p,_ptAY_loop
    ld a,#0x3f
    ld (0x9000),a
    ld a,(0xe0f2)
    bit 6,a
    jp z,_ptAY_loopskip1
    ld de,#0x9800
    and #0xbf
    ld (0xe0f2),a
    bit 4,a
    call nz,_write_SCC_special
    ld a,(TRACK_Chan4+9)
    call _write_SCC_wave
_ptAY_loopskip1: ld a,(0xe119)
    bit 6,a
    jp z,_ptAY_loopskip2
    ld de,#0x9820
    and #0xbf
    ld (0xe119),a
    bit 4,a
    call nz,_write_SCC_special
    ld a,(TRACK_Chan5+9)
    call _write_SCC_wave
_ptAY_loopskip2: ld a,(0xe140)
    bit 6,a
    jp z,_ptAY_loopskip3
    ld de,#0x9840
    and #0xbf
    ld (0xe140),a
    bit 4,a
    call nz,_write_SCC_special
    ld a,(TRACK_Chan6+9)
    call _write_SCC_wave
_ptAY_loopskip3: ld a,(0xe167)
    bit 6,a
    jp z,_ptAY_loopskip4
    ld de,#0x9860
    and #0xbf
    ld (0xe167),a
    bit 4,a
    call nz,_write_SCC_special
    ld a,(TRACK_Chan7+9)
    call _write_SCC_wave
_ptAY_loopskip4:
scc_reg_update: ld hl,#0xe25b
    ld de,#SCC_regMIXER
    ld bc,#0x988f
scc_reg_updateloop: ld a,(de)
    cp (hl)
    jr z,scc_reg_updateskip
    ld (hl),a
    ld (bc),a
scc_reg_updateskip: dec de
    dec hl
    dec c
    jp m,scc_reg_updateloop
    ret 
_write_SCC_wave: bit 0,a
    jp z,_write_SCC_wavenormalwave
    bit 1,a
    jp nz,_write_SCC_wavesfxwave
_write_SCC_waveramwave: dec hl
    and #0xfe
    ld (hl),a
    ld hl,#_0x9800
    ld a,e
    add a,l
    ld l,a
    jp nc,_write_SCC_waveskip
    inc h
_write_SCC_waveskip: jp copy_wave_fast
_write_SCC_wavesfxwave: and #0xf8
    ld l,a
    ld h,#0x0
    add hl,hl
    add hl,hl
    ld bc,#SFX_WAVEBASE
    add hl,bc
    jp copy_wave_fast
_write_SCC_wavenormalwave: ld l,a
    ld h,#0x0
    add hl,hl
    add hl,hl
    ld bc,(replay_wavebase)
    add hl,bc
copy_wave_fast: ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ldi
    ret 
_write_SCC_special: ld hl,#replay_morph_buffer
_wss_l: inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    inc hl
    ldi
    pop hl
    ld bc,#TRACK_cmd_0
    add hl,bc
    jp (hl)
replay_process_morph: ld hl,#replay_morph_timer
    dec (hl)
    ret nz
    ld b,#0x4
    ld de,#TRACK_REC_SIZE
    ld hl,#0xe0f2
replay_process_morphloop: bit 4,(hl)
    jp z,replay_process_morphskip
    set 6,(hl)
replay_process_morphskip: add hl,de
    djnz replay_process_morphloop
    inc a
    jp nz,_rpm_next_step
    inc a
    ld (replay_morph_active),a
    ld a,(replay_morph_speed)
    inc a
    ld (replay_morph_timer),a
    ld a,(replay_morph_waveform)
    ld l,a
    ld h,#0x0
    add hl,hl
    add hl,hl
    ld de,(replay_wavebase)
    add hl,de
    ld de,#replay_morph_buffer
    ld b,#0x20
_rpm_loop: inc de
    ld a,(de)
    dec de
    add a,#0x80
    ld c,a
    ld a,(hl)
    add a,#0x80
    cp c
    jp c,_rpm_smaller
_rpm_larger: sub c
    rrca 
    rrca 
    rrca 
    rrca 
    and #0xef
    ld (de),a
    inc de
    inc de
    inc hl
    djnz _rpm_loop
    ret 
_rpm_smaller: sub c
    neg
    rrca 
    rrca 
    rrca 
    rrca 
    or #0x10
    ld (de),a
    inc de
    inc de
    inc hl
    djnz _rpm_loop
    ret 
_rpm_next_step: ld a,(replay_morph_speed)
    inc a
    ld (replay_morph_timer),a
    ld a,(replay_morph_counter)
    ld c,a
    add a,#0x10
    ld (replay_morph_counter),a
    jp nz,_rpm_next_stepskip
    ld (replay_morph_active),a
_rpm_next_stepskip: dec c
    ld hl,#replay_morph_buffer
    ld b,#0x20
_rpm_ns_loop: ld a,(hl)
    bit 4,a
    jp z,_rmp_ns_add
_rmp_ns_sub: and #0xef
    cp c
    jp c,_rmp_ns_subskip
    inc a
_rmp_ns_subskip: and #0x1f
    inc hl
    ld d,a
    ld a,(hl)
    sub d
    ld (hl),a
    inc hl
    djnz _rpm_ns_loop
    ret 
_rmp_ns_add: cp c
    jp c,_rmp_ns_addskip
    inc a
_rmp_ns_addskip: and #0x1f
    inc hl
    add a,(hl)
    ld (hl),a
    inc hl
    djnz _rpm_ns_loop
    ret 
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
_VOLUME_TABLE: nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    djnz .+18
    djnz .+18
    djnz .+18
    djnz .+18
    ld de,#replay_init
    nop
    nop
    djnz .+18
    djnz .+18
    djnz .+18
    djnz .+18
    jr nz,.+34
    ld hl,#replay_pause+3
    nop
    nop
    djnz .+18
    djnz .+18
    djnz .+34
    jr nz,.+34
    jr nz,.+34
    ld sp,#0x3332
    nop
    nop
    djnz .+18
    djnz .+18
    jr nz,.+34
    jr nz,.+34
    jr nc,.+50
    ld sp,#0x4332
    ld b,h
    nop
    nop
    djnz .+18
    djnz .+34
    jr nz,.+34
    jr nc,.+50
    jr nc,.+67
    ld b,d
    ld b,e
    ld d,h
    ld d,l
    nop
    nop
    djnz .+18
    jr nz,.+34
    jr nz,.+50
    jr nc,.+66
    ld b,c
    ld b,d
    ld d,e
    ld d,h
    ld h,l
    ld h,(hl)
    nop
    nop
    djnz .+18
    jr nz,.+34
    jr nc,.+50
    ld b,b
    ld b,c
    ld d,d
    ld d,e
    ld h,h
    ld h,l
    halt
    ld (hl),a
    nop
    djnz .+18
    jr nz,.+34
    jr nc,.+50
    ld b,b
    ld b,c
    ld d,d
    ld d,e
    ld h,h
    ld h,l
    halt
    ld (hl),a
    adc a,b
    nop
    djnz .+18
    jr nz,.+34
    jr nc,.+66
    ld b,c
    ld d,d
    ld d,e
    ld h,h
    ld (hl),l
    halt
    add a,a
    adc a,b
    sbc a,c
    nop
    djnz .+18
    jr nz,.+50
    jr nc,.+67
    ld d,d
    ld d,e
    ld h,h
    ld (hl),l
    halt
    add a,a
    sbc a,b
    sbc a,c
    xor d
    nop
    djnz .+18
    jr nz,.+50
    ld b,c
    ld b,d
    ld d,e
    ld h,h
    ld (hl),l
    halt
    add a,a
    sbc a,b
    xor c
    xor d
    cp e
    nop
    djnz .+34
    jr nz,.+51
    ld b,d
    ld d,e
    ld h,h
    ld h,l
    halt
    add a,a
    sbc a,b
    xor c
    xor d
    cp e
    call z,0x1000
    jr nz,TRACK_ToneTable_PSG+5
    ld (0x5443),a
    ld h,l
    halt
    add a,a
    sbc a,b
    xor c
    xor d
    cp e
    call z,0xdd
    djnz TRACK_ToneTable_PSG+4
    ld (0x5443),a
    ld h,l
    halt
    ld (hl),a
    adc a,b
    sbc a,c
    xor d
    cp e
    call z,0xeedd
    nop
    ld de,#0x3322
    ld b,h
    ld d,l
    ld h,(hl)
    ld (hl),a
    adc a,b
    sbc a,c
    xor d
    cp e
    call z,0xeedd
    rst 56
TRACK_ToneTable_PSG: ld (hl),#0xd
    ld a,b
    inc c
    push bc
    dec bc
    inc e
    dec bc
    ld a,h
    ld a,(bc)
    and #0x9
    ld d,a
    add hl,bc
    pop de
    ex af,af'
    ld d,e
    ex af,af'
    in a,(0x7)
    ld l,d
    rlca 
    nop
    rlca 
    sbc a,e
    ld b,#0x3c
    ld b,#0xe3
    dec b
    adc a,(hl)
    dec b
    ld a,#0x5
    di
    inc b
    xor h
    inc b
    ld l,c
    inc b
    add hl,hl
    inc b
    .db 0xed
    .db 0x3
    or l
    inc bc
    add a,b
    inc bc
    ld c,(hl)
    inc bc
    ld e,#0x3
    pop af
    ld (bc),a
    rst 0
    ld (bc),a
    sbc a,a
    ld (bc),a
    ld a,c
    ld (bc),a
    ld d,(hl)
    ld (bc),a
    inc (hl)
    ld (bc),a
    dec d
    ld (bc),a
    rst 48
    ld bc,#decode_datadecode5+3
    ret nz
    ld bc,#0x1a7
    adc a,a
    ld bc,#decode_datadecode2+7
    ld h,e
    ld bc,#decode_data-1
    dec a
    ld bc,#NTSC+2
    ld a,(de)
    ld bc,#replay_play_no
    ei
    nop
    .db 0xed
    .db 0x0
    ret po
    nop
    out (0x0),a
    ret z
    nop
    cp h
    nop
    or d
    nop
    xor b
    nop
    sbc a,(hl)
    nop
    sub l
    nop
    adc a,l
    nop
    add a,l
    nop
    ld a,(hl)
    nop
    ld (hl),a
    nop
    ld (hl),b
    nop
    ld l,d
    nop
    ld h,h
    nop
    ld e,(hl)
    nop
    ld e,c
    nop
    ld d,h
    nop
    ld c,a
    nop
    ld c,e
    nop
    ld b,a
    nop
    ld b,e
    nop
    ccf 
    nop
    dec sp
    nop
    jr c,.+2
    dec (hl)
    nop
    ld (0x2f00),a
    nop
    inc l
    nop
    ld hl,(0x2800)
    nop
    dec h
    nop
    inc hl
    nop
    ld hl,#0x1f00
    nop
    ld e,#0x0
    inc e
    nop
    ld a,(de)
    nop
    add hl,de
    nop
    jr .+2
    ld d,#0x0
    dec d
    nop
    inc d
    nop
    inc de
    nop
    ld (de),a
    nop
    ld de,#0x1000
    nop
    rrca 
    nop
    ld c,#0x0
TRACK_Vibrato_sine: nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    ld bc,#replay_play_no-9
    ld bc,#replay_play_no-9
    ld bc,#replay_play_no-9
    ld bc,#replay_play_no-9
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    ld bc,#replay_play_no-9
    ld bc,#replay_play_no-9
    ld (bc),a
    ld (bc),a
    ld (bc),a
    ld (bc),a
    ld (bc),a
    ld (bc),a
    ld bc,#replay_play_no-9
    ld bc,#replay_play_no-9
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    ld bc,#replay_play_no-9
    ld bc,#decode_datadecode6+5
    ld (bc),a
    ld (bc),a
    ld (bc),a
    inc bc
    inc bc
    inc bc
    inc bc
    ld (bc),a
    ld (bc),a
    ld (bc),a
    ld (bc),a
    ld bc,#replay_play_no-9
    ld bc,#B_ACTNOT
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    ld bc,#replay_play_no-9
    ld bc,#decode_datadecode6+6
    ld (bc),a
    inc bc
    inc bc
    inc b
    inc b
    inc b
    inc b
    inc bc
    inc bc
    ld (bc),a
    ld (bc),a
    ld (bc),a
    ld bc,#replay_play_no-9
    ld bc,#replay_init
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    ld bc,#replay_play_no-9
    ld bc,#decode_datadecode6+6
    inc bc
    inc bc
    inc b
    inc b
    dec b
    dec b
    dec b
    dec b
    inc b
    inc b
    inc bc
    inc bc
    ld (bc),a
    ld (bc),a
    ld bc,#replay_play_no-9
    ld bc,#replay_init
    nop
    nop
    nop
    nop
    nop
    nop
    ld bc,#replay_play_no-9
    ld (bc),a
    ld (bc),a
    inc bc
    inc bc
    inc b
    inc b
    dec b
    dec b
    ld b,#0x6
    dec b
    dec b
    inc b
    inc b
    inc bc
    inc bc
    ld (bc),a
    ld (bc),a
    ld bc,#replay_play_no-9
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    ld bc,#replay_play_no-9
    ld (bc),a
    ld (bc),a
    inc bc
    inc b
    inc b
    dec b
    ld b,#0x6
    rlca 
    ex af,af'
    ex af,af'
    rlca 
    ld b,#0x6
    dec b
    inc b
    inc b
    inc bc
    ld (bc),a
    ld (bc),a
    ld bc,#replay_play_no-9
    nop
    nop
    nop
    nop
    nop
    ld bc,#replay_play_no-9
    ld (bc),a
    inc bc
    inc b
    dec b
    ld b,#0x7
    ex af,af'
    add hl,bc
    ld a,(bc)
    inc c
    dec c
    dec c
    inc c
    ld a,(bc)
    add hl,bc
    ex af,af'
    rlca 
    ld b,#0x5
    inc b
    inc bc
    ld (bc),a
    ld bc,#replay_play_no-9
    nop
    nop
    nop
    nop
    ld bc,#decode_datadecode6+6
    inc b
    dec b
    ld b,#0x8
    add hl,bc
    dec bc
    dec c
    rrca 
    ld de,#0x1513
    dec d
    inc de
    ld de,#0xd0f
    dec bc
    add hl,bc
    ex af,af'
    ld b,#0x5
    inc b
    ld (bc),a
    ld (bc),a
    ld bc,#replay_init
    nop
    ld bc,#decode_datadecode6+5
    inc b
    dec b
    rlca 
    add hl,bc
    dec bc
    ld c,#0x10
    inc de
    ld d,#0x19
    inc e
    rra 
    rra 
    inc e
    add hl,de
    ld d,#0x13
    djnz .+16
    dec bc
    add hl,bc
    rlca 
    dec b
    inc b
    ld (bc),a
    ld bc,#B_ACTNOT
    nop
    ld bc,#skipdskipe+3
    dec b
    ex af,af'
    dec bc
    ld c,#0x11
    dec d
    add hl,de
    dec e
    ld hl,#0x2b26
    cpl 
    cpl 
    dec hl
    ld h,#0x21
    dec e
    add hl,de
    dec d
    ld de,#_ptAY_loopskip4+1
    ex af,af'
    dec b
    inc bc
    ld (bc),a
    ld bc,#0x100
    ld bc,#decode_cmd2_port_down
    rlca 
    dec bc
    ld c,#0x12
    rla 
    inc e
    ld hl,#0x2d27
    inc sp
    add hl,sp
    ccf 
    ccf 
    add hl,sp
    inc sp
    dec l
    daa
    ld hl,#0x171c
    ld (de),a
    ld c,#0xb
    rlca 
    dec b
    inc bc
SFX_WAVEBASE = .+2
    ld bc,#B_ACTNOT
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    add hl,de
    ld sp,#0x5a47
    ld l,d
    ld (hl),l
    ld a,l
    ld a,a
    ld a,l
    ld (hl),l
    ld l,d
    ld e,d
    ld b,a
    ld sp,#0x8019
    and b
    ret nz
    ret po
    nop
    jr nz,.+66
    ld h,b
    add a,b
    and b
    ret nz
    ret po
    nop
    jr nz,.+66
    ld h,b
    ld a,a
    add a,b
    ld a,a
    add a,b
    ld a,a
    add a,b
    ld a,a
    add a,b
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    ld a,a
    add a,b
    ld a,a
    add a,b
    ld a,a
    add a,b
    ld a,a
    add a,b
    ld (hl),b
    ld (hl),b
    ld (hl),b
    ld (hl),b
    ld (hl),b
    ld (hl),b
    ld (hl),b
    ld (hl),b
    add a,b
    add a,b
    add a,b
    add a,b
    add a,b
    add a,b
    add a,b
    add a,b
    ld (hl),b
    ld (hl),b
    ld (hl),b
    add a,b
    add a,b
    add a,b
    ld (hl),b
    ld (hl),b
    ld (hl),b
    ld (hl),b
    add a,b
    add a,b
    add a,b
    add a,b
    add a,b
    add a,b
    nop
    ld l,b
    ld b,b
    inc b
    nop
    ld h,#0x40
    push af
    djnz .+66
    jr nz,.-46
    ret p
    nop
    ret nz
    add a,b
    ret nc
    jr nc,.-62
    and b
    or b
    ret nz
    add a,b
    ret nc
    ret p
    ld b,b
    djnz .-62
    call nc,0xc000
    ret po
    add a,b
    add a,b
    ret pe
    jr .+58
    ld h,(hl)
    ld a,b
    ld a,a
    add a,b
    add a,b
    add a,b
    add a,b
    add a,b
    add a,b
    add a,b
    sbc a,h
    add a,b
    call c,0x2080
    ret nc
    add a,b
    ld a,a
    add a,b
    ret nc
    jr nz,.-126
    call c,0x9c80
    add a,b
    adc a,b
    sub b
    adc a,b
    sub b
    sbc a,h
    or b
    ret nz
    ret po
    ld h,#0x70
    ld a,h
    ld (hl),b
    ld d,(hl)
    ld b,b
    jr nz,.+18
    call m,0xfce0
    djnz .+38
    ld b,b
    ld d,h
    ld (hl),d
    ld a,a
    ld (hl),b
    ld h,#0xe0
    ret nz
    or b
    sbc a,h
    sub b
    adc a,b
    nop
    nop
    nop
    add a,b
    nop
    ld (hl),b
    ld (hl),b
    ld (hl),b
    nop
    nop
    nop
    add a,b
    nop
    nop
    nop
    add a,b
    add a,b
    add a,b
    add a,b
    nop
    add a,b
    nop
    nop
    nop
    nop
    add a,b
    add a,b
    add a,b
    nop
    add a,b
    add a,b
    add a,b
    nop
    ld a,a
    nop
    add a,b
    and b
    ret nz
    ret c
    ret p
    ex af,af'
    jr nz,.+50
    ld b,b
    ld d,b
    ld h,b
    ld (hl),b
    ld a,b
    ld a,h
    ld a,a
    ld a,h
    ld a,b
    ld (hl),b
    ld h,b
    ld d,b
    ld b,b
    jr nc,.+34
    ex af,af'
    ret p
    ret c
    ret nz
    and b
    add a,b
    add a,b
    ret nc
    jr nz,.+129
    ld b,b
    nop
    ret nz
    add a,b
    ret nc
    jr nz,.+129
    jr nc,.-46
    add a,b
    ret nc
    jr nc,.+129
    jr nc,.-46
    add a,b
    or b
    ret po
    jr .-30
    or b
    add a,b
    sub b
    and b
    or b
    and b
    sub b
    add a,b
    sub b
    ret nc
    jr nz,.+14
    cp h
    xor d
    and #0xdc
    cp h
    ex (sp),hl
    ld b,b
    jr nc,.-30
    ret nc
    djnz .+8
    call po,0x700c
    ld d,b
    ret po
    ret nc
    djnz .+2
    ret nc
    ret p
    ld b,b
    jr nz,.-58
    ret nz
    ret p
    sub b
    add a,b
    xor d
    ret z
    nop
    inc h
    ld b,b
    ld e,h
    ld (hl),b
    ld a,a
    ld l,d
    ld c,d
    ld h,#0x0
    ret nc
    xor b
    adc a,h
    add a,b
    xor d
    ret z
    nop
    inc h
    ld b,b
    ld e,h
    ld (hl),b
    ld a,a
    ld l,d
    ld c,d
    ld h,#0x0
    ret nc
    xor b
    adc a,h
    nop
    add hl,de
    ld sp,#0x5a47
    ld l,d
    ld (hl),l
    ld a,l
    ld a,a
    ld a,l
    ld (hl),l
    ld l,d
    ld e,d
    ld b,a
    ld sp,#TRACK_cmd_A_add+4
    ret p
    ret po
    ret nc
    ret nz
    or b
    and b
    sub b
    add a,b
    sub b
    and b
    or b
    ret nz
    ret nc
    ret po
    ret p
    nop
    jr nc,.-14
    jr nc,.+66
    ld d,b
    ld h,b
    ld h,b
    ld (hl),b
    ld a,c
    ld (hl),b
    ld a,b
    ld b,b
    nop
    nop
    ld c,#0x70
    add a,e
    ld h,b
    ld d,b
    nop
    nop
    nop
    ld h,#0x74
    add a,d
    add a,h
    ld h,l
    ld h,h
    call po,0x8493
    add a,b
    and b
    ret nz
    call z,0xbcc0
    ret nz
    call nz,0x24e0
    ret p
    ld e,b
    ld c,h
    ld c,d
    inc a
    ld d,b
    ld a,a
    ld h,b
    ld b,b
    jr nc,.+66
    ld b,(hl)
    ld b,b
    ld b,(hl)
    inc a
    jr nz,.-56
    jp p,0xb4a4
    or (hl)
    and b
    add a,b
    sbc a,b
    cp b
    ret po
    jr nz,.+82
    ld l,b
    ld a,a
    ld l,b
    ld d,b
    jr nz,.-14
    ret nc
    cp b
    xor b
    sub b
    sub b
    cp b
    add a,b
    nop
    add a,b
    ld b,b
    add a,b
    ld a,a
    add a,b
    ld b,b
    add a,b
    nop
    add a,b
    ret nz
    sub b
    sub b
    nop
    ld b,b
    ld a,a
    ld b,b
    ld bc,#0x81c0
    ret nz
    ld bc,#0x7f40
    ld b,b
    ld bc,#0x1c0
    ld b,b
    ld bc,#decode_datadecode5+8
    jr nz,.+3
    ret p
    ld bc,#replay_play_no+6
    rst 56
    rst 56
    rst 56
    rst 56
    ld b,b
    ld b,b
    ld b,b
    add a,b
    nop
    nop
    nop
    ld (hl),b
    ld (hl),b
    nop
    nop
    add a,b
    add a,b
    add a,b
    nop
    nop
    nop
    nop
    ld (hl),b
    ld (hl),b
    ld (hl),b
    add a,b
    ld a,a
    add a,b
    add a,b
    ret nz
    nop
    jr nz,.+54
    ld b,b
    inc (hl)
    jr nz,.+2
    ret nz
    add a,b
    and b
    sub b
    and b
    xor h
    ret p
    ld a,(bc)
    ld d,#0x0
    sub b
    nop
    jr nz,.+66
    ld h,b
    ld d,b
    jr c,.+30
    jp p,0xd6e2
    ret nc
    ret nc
    jp c,0xe0dc
    jp po,0xe2e2
    ret po
    call c,0xd0d8
    or b
    nop
    djnz .+34
    jr nc,.+66
    ld d,b
    ld h,b
    ld (hl),b
    ld a,a
    ld (hl),b
    ld h,b
    ld d,b
    ld b,b
    jr nc,.+34
    djnz .+1
    ret p
    ret po
    ret nc
    ret nz
    or b
    and b
    sub b
    add a,b
    sub b
    and b
    or b
    ret nz
    ret nc
    ret po
    ret p
    nop
    ld b,b
    ld a,a
    ld b,b
    djnz .+3
    jp pe,0xc3d6
    cp c
    xor a
    and h
    sbc a,h
    sub l
    adc a,a
    adc a,d
    add a,(hl)
    add a,e
    add a,c
    add a,e
    add a,(hl)
    adc a,d
    adc a,a
    sub l
    sbc a,h
    and h
    xor a
    cp c
    jp 0xead6
    rst 56
    nop
    add hl,de
    ld sp,#0x5a47
    ld l,d
    ld (hl),l
    ld a,l
    ld a,a
    ld a,l
    ld (hl),l
    ld l,d
    ld e,d
    ld b,a
    ld sp,#TRACK_cmd_A_add+4
    rst 32
    rst 8
    cp c
    and (hl)
    sub (hl)
    adc a,e
    add a,e
    add a,b
    add a,e
    adc a,e
    sub (hl)
    and (hl)
    cp c
    rst 8
    rst 32
    jr nc,.+82
    ld d,b
    jr nc,.+2
    nop
    djnz .+66
    ld h,b
    ld (hl),b
    ld h,b
    jr nc,.-14
    ret po
    ret po
    nop
    jr nz,.+34
    djnz .-62
    and b
    sub b
    and b
    ret nz
    nop
    nop
    ret nc
    or b
    or b
    ret nc
    nop
    nop
    nop
    ld l,b
    ld c,b
    jr .+74
    ld l,b
    jr z,.+2
    ld c,b
    ld (hl),a
    ld e,b
    ex af,af'
    jr z,.+58
    nop
    cp b
    ex af,af'
    ld e,b
    nop
    ret pe
    ret m
    nop
    cp b
    sbc a,b
    ret z
    ex af,af'
    ret pe
    xor b
    ret z
    ret m
    ret z
    xor b
    nop
    add hl,de
    ld sp,#0x5a47
    ld l,d
    ld (hl),l
    ld a,l
    ld a,a
    ld a,l
    ld (hl),l
    ld l,d
    ld e,d
    ld b,a
    ld sp,#TRACK_cmd_A_add+4
    ret po
    ret nz
    and b
    add a,b
    and b
    ret nz
    ret po
    nop
    jr nz,.+66
    ld h,b
    ld a,a
    ld h,b
    ld b,b
    jr nz,.+2
    jr nc,.+82
    ld h,b
    ld (hl),b
    ld h,b
    ld d,b
    jr nc,.+2
    ret nc
    or b
    and b
    sub b
    and b
    or b
    ret nc
    nop
    ld b,b
    ld h,b
    ld (hl),b
    ld h,b
    ld b,b
    nop
    ret nz
    and b
    sub b
    and b
    ret nz
    nop
    ld (hl),b
    nop
    sub b
    ld bc,#0x402a
    ld d,b
    ld e,h
    ld l,b
    ld (hl),b
    ld a,b
    ld a,a
    ld a,b
    ld (hl),b
    ld l,b
    ld e,h
    ld d,b
    ld b,b
    ld hl,(0xd6ff)
    ret nz
    or b
    and h
    sbc a,b
    sub b
    adc a,b
    add a,c
    adc a,b
    sub b
    sbc a,b
    and h
    or b
    ret nz
    sub #0x0
    ret po
    ret nz
    and b
    add a,b
    and b
    ret nz
    ret po
    nop
    jr nz,.+66
    ld h,b
    ld a,a
    ld h,b
    ld b,b
    jr nz,.+2
    ret po
    ret nz
    and b
    add a,b
    and b
    ret nz
    ret po
    nop
    jr nz,.+66
    ld h,b
    ld a,a
    ld h,b
    ld b,b
    jr nz,.+2
    ret m
    ret p
    ret pe
    ret po
    ret c
    ret nc
    ret z
    ret nz
    cp b
    or b
    xor b
    and b
    sbc a,b
    sub b
    adc a,b
    add a,b
    ld a,b
    ld (hl),b
    ld l,b
    ld h,b
    ld e,b
    ld d,b
    ld c,b
    ld b,b
    jr c,.+50
    jr z,.+34
    jr .+18
    ex af,af'
    add a,b
    or b
    ret nz
    djnz .+28
    ld hl,(0x1a2c)
    nop
    ret po
    ret nc
    ret po
    ld (0x7053),hl
    ld (hl),l
    ld (hl),b
    ld sp,#0x80ea
    adc a,b
    adc a,d
    adc a,h
    adc a,(hl)
    nop
    ld a,a
    ld (hl),l
    ld (hl),e
    ld h,d
    nop
    ret nz
    sub b
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    ld (hl),a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    add a,a
    nop
    add hl,de
    ld sp,#0x5a47
    ld l,d
    ld (hl),l
    ld a,l
    ld a,a
    ld a,l
    ld (hl),l
    ld l,d
    ld e,d
    ld b,a
    ld sp,#0x8019
    sub b
    and b
    or b
    ret nz
    ret nc
    ret po
    ret p
    nop
    djnz .+34
    jr nc,.+66
    ld d,b
    ld h,b
    ld (hl),b
PSG_regEnvH = 0xe1b7
PSG_regEnvL = 0xe1b6
PSG_regEnvShape = 0xe1b8
PSG_regMIXER = 0xe1b2
PSG_regToneB = 0xe1ad
PSG_regToneC = 0xe1af
PSG_regVOLA = 0xe1b3
PSG_regVOLB = 0xe1b4
PSG_regVOLC = 0xe1b5
PSG_registers = 0xe1ab
SCC_regMIXER = 0xe24b
SCC_regToneB = 0xe23e
SCC_regToneC = 0xe240
SCC_regToneD = 0xe242
SCC_regToneE = 0xe244
SCC_regVOLA = 0xe246
SCC_regVOLB = 0xe247
SCC_regVOLC = 0xe248
SCC_regVOLD = 0xe249
SCC_regVOLE = 0xe24a
SCC_registers = 0xe23c
TRACK_Chan1 = 0xe073
TRACK_Chan2 = 0xe09a
TRACK_Chan3 = 0xe0c1
TRACK_Chan4 = 0xe0e8
TRACK_Chan5 = 0xe10f
TRACK_Chan6 = 0xe136
TRACK_Chan7 = 0xe15d
TRACK_Chan8 = 0xe184
TRACK_Instrument = 0xffef
TRACK_pointer1 = 0xe00b
TRACK_pointer2 = 0xe00d
TRACK_pointer3 = 0xe00f
TRACK_pointer4 = 0xe011
TRACK_pointer5 = 0xe013
TRACK_pointer6 = 0xe015
TRACK_pointer7 = 0xe017
TRACK_pointer8 = 0xe019
_0x9800 = 0xe1bc
_SP_Storage = 0xe000
equalization_cnt = 0xe071
equalization_flag = 0xe072
equalization_freq = 0xe070
replay_arp_speed = 0xe021
replay_fade = 0xe022
replay_fade_timer = 0xe023
replay_fade_vol = 0xe024
replay_insbase = 0xe009
replay_mainPSGvol = 0xe003
replay_mainSCCvol = 0xe005
replay_mainvol = 0xe026
replay_mode = 0xe020
replay_morph_active = 0xe02a
replay_morph_buffer = 0xe02f
replay_morph_counter = 0xe02e
replay_morph_speed = 0xe02d
replay_morph_timer = 0xe02b
replay_morph_type = 0xe02c
replay_morph_waveform = 0xe06f
replay_noise = 0xe1b9
replay_orderpointer = 0xe01b
replay_previous_note = 0xe025
replay_speed = 0xe01d
replay_speed_subtimer = 0xe01e
replay_speed_timer = 0xe01f
replay_tonetable = 0xe028
replay_trigger = 0xe002
replay_wavebase = 0xe007
